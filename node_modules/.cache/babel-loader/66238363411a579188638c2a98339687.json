{"ast":null,"code":"import * as DataService from \"../networkLayer/ApiService\";\nimport * as ActionType from \"./types\";\nimport { API_BASE_URL, BILL_SERVICES } from \"../networkLayer/ApiEndpoints\";\nimport { store } from \"../App\";\nexport const fetchBills = () => {\n  return async dispatch => {\n    try {\n      // Replace localhost with customer url once backend api is pushed to server\n      const endPoint = API_BASE_URL;\n      const path = BILL_SERVICES.FETCH_BILL_API;\n      let payload = {\n        bills: null\n      };\n      const response = await DataService.callGetAPI(endPoint, path);\n      console.log(\"Response received\", JSON.stringify(response));\n\n      if (response) {\n        payload.bills = response.bills;\n        dispatch({\n          type: ActionType.BILL_FETCH_SUCCESS,\n          payload: payload\n        });\n      }\n    } catch (err) {\n      console.log(\"Error received in API\", err);\n      let payload = {\n        errorMessage: err.message\n      };\n      dispatch({\n        type: ActionType.BILL_FETCH_FAIL,\n        payload: payload\n      });\n    }\n  };\n};\nexport const deleteBill = id => {\n  return async dispatch => {\n    try {\n      let payload = {\n        bills: []\n      };\n      let billList = store.getState().dashboardReducer.billList;\n      payload.bills = billList.filter(bill => {\n        return bill.id !== id;\n      });\n      dispatch({\n        type: ActionType.DELETE_BILL_SUCCESS,\n        payload: payload\n      });\n    } catch (err) {}\n  };\n};\nexport const addBill = () => {\n  return async dispatch => {\n    try {\n      let payload = {\n        bills: []\n      };\n      let billList = store.getState().dashboardReducer.billList;\n      let dummyBillObject = {\n        \"id\": billList.length + 1,\n        \"description\": \"Filpkart\",\n        \"category\": \"shopping\",\n        \"amount\": \"101\",\n        \"date\": \"10-07-2020\"\n      };\n      billList.push(dummyBillObject);\n      payload.bills = billList;\n      dispatch({\n        type: ActionType.ADD_BILL_SUCCESS,\n        payload: payload\n      });\n    } catch (err) {}\n  };\n};\nexport const payableBill = () => {\n  return async dispatch => {\n    try {\n      let payload = {\n        bills: []\n      };\n      let billList = store.getState().dashboardReducer.billList;\n      billList = billList.sort((a, b) => parseInt(b.amount) - parseInt(a.amount));\n      let totalSum = 0;\n      let ids = [];\n      console.log(\"Monthly budget\", MONTHLY_BUDGET);\n      console.log(\"list before loop\", JSON.stringify(state.filteredBills));\n      state.filteredBills.forEach(element => {\n        console.log(\"before if\");\n\n        if (totalSum + parseInt(element.amount) <= MONTHLY_BUDGET) {\n          console.log(\"Inside if\", element);\n          totalSum += parseInt(element.amount);\n          ids.push(element.id);\n        }\n      });\n      console.log(\"Ids list\", JSON.stringify(ids));\n      setBills({ ...state.payableBills,\n        payableBills: ids\n      });\n      billList.push(dummyBillObject);\n      payload.bills = billList;\n      dispatch({\n        type: ActionType.PAYABLE_BILL_LIST_CREATED,\n        payload: payload\n      });\n    } catch (err) {}\n  };\n};","map":{"version":3,"sources":["/Users/apple/Desktop/Personal/bill-management-react/src/actions/DashboardAction.js"],"names":["DataService","ActionType","API_BASE_URL","BILL_SERVICES","store","fetchBills","dispatch","endPoint","path","FETCH_BILL_API","payload","bills","response","callGetAPI","console","log","JSON","stringify","type","BILL_FETCH_SUCCESS","err","errorMessage","message","BILL_FETCH_FAIL","deleteBill","id","billList","getState","dashboardReducer","filter","bill","DELETE_BILL_SUCCESS","addBill","dummyBillObject","length","push","ADD_BILL_SUCCESS","payableBill","sort","a","b","parseInt","amount","totalSum","ids","MONTHLY_BUDGET","state","filteredBills","forEach","element","setBills","payableBills","PAYABLE_BILL_LIST_CREATED"],"mappings":"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","sourcesContent":["import * as DataService from \"../networkLayer/ApiService\";\nimport * as ActionType from \"./types\";\nimport { API_BASE_URL, BILL_SERVICES } from \"../networkLayer/ApiEndpoints\";\nimport { store } from \"../App\";\n\nexport const fetchBills = () => {\n  return async (dispatch) => {\n    try {\n      // Replace localhost with customer url once backend api is pushed to server\n      const endPoint = API_BASE_URL;\n      const path = BILL_SERVICES.FETCH_BILL_API;\n      let payload = {\n        bills: null,\n      };\n      const response = await DataService.callGetAPI(endPoint, path);\n      console.log(\"Response received\", JSON.stringify(response));\n      if (response) {\n        payload.bills = response.bills;\n        dispatch({\n          type: ActionType.BILL_FETCH_SUCCESS,\n          payload: payload,\n        });\n      }\n    } catch (err) {\n      console.log(\"Error received in API\", err);\n      let payload = {\n        errorMessage: err.message,\n      };\n      dispatch({\n        type: ActionType.BILL_FETCH_FAIL,\n        payload: payload,\n      });\n    }\n  };\n};\n\nexport const deleteBill = (id) => {\n  return async (dispatch) => {\n    try {\n      let payload = {\n        bills: [],\n      };\n      let billList = store.getState().dashboardReducer.billList;\n\n      payload.bills = billList.filter((bill) => {\n        return bill.id !== id;\n      });\n\n      dispatch({\n        type: ActionType.DELETE_BILL_SUCCESS,\n        payload: payload,\n      });\n    } catch (err) {}\n  };\n};\n\nexport const addBill = () => {\n  return async (dispatch) => {\n    try {\n      let payload = {\n        bills: [],\n      };\n      let billList = store.getState().dashboardReducer.billList;\n      let dummyBillObject = {\n        \"id\": billList.length + 1,\n        \"description\": \"Filpkart\",\n        \"category\": \"shopping\",\n        \"amount\": \"101\",\n        \"date\": \"10-07-2020\",\n      };\n      billList.push(dummyBillObject);\n      payload.bills = billList;\n      dispatch({\n        type: ActionType.ADD_BILL_SUCCESS,\n        payload: payload,\n      });\n    } catch (err) {}\n  };\n};\n\nexport const payableBill = () => {\n  return async (dispatch) => {\n    try {\n      let payload = {\n        bills: [],\n      };\n      let billList = store.getState().dashboardReducer.billList;\n\n\n\n        billList = billList.sort(\n          (a, b) => parseInt(b.amount) - parseInt(a.amount)\n        );\n  \n      let totalSum = 0;\n      let ids = [];\n      console.log(\"Monthly budget\", MONTHLY_BUDGET);\n      console.log(\"list before loop\", JSON.stringify(state.filteredBills));\n      state.filteredBills.forEach((element) => {\n        console.log(\"before if\");\n        if (totalSum + parseInt(element.amount) <= MONTHLY_BUDGET) {\n          console.log(\"Inside if\", element);\n          totalSum += parseInt(element.amount);\n          ids.push(element.id);\n        }\n      });\n      console.log(\"Ids list\", JSON.stringify(ids));\n      setBills({\n        ...state.payableBills,\n        payableBills: ids,\n      });\n      billList.push(dummyBillObject);\n      payload.bills = billList;\n      dispatch({\n        type: ActionType.PAYABLE_BILL_LIST_CREATED,\n        payload: payload,\n      });\n    } catch (err) {}\n  };\n};\n"]},"metadata":{},"sourceType":"module"}