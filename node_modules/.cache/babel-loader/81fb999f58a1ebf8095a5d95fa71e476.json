{"ast":null,"code":"import * as DataService from \"../networkLayer/ApiService\";\nimport * as ActionType from \"./types\";\nimport { API_BASE_URL, BILL_SERVICES } from \"../networkLayer/ApiEndpoints\";\nimport { store } from \"../App\";\nimport { MONTHLY_BUDGET } from \"../constants/Constant\";\n/**\n * Function to fetch Bill List from the server\n */\n\nexport const fetchBills = () => {\n  return async dispatch => {\n    try {\n      const endPoint = API_BASE_URL;\n      const path = BILL_SERVICES.FETCH_BILL_API;\n      let payload = {\n        bills: null\n      };\n      const response = await DataService.callGetAPI(endPoint, path);\n      console.log(\"Response received\", JSON.stringify(response));\n\n      if (response) {\n        payload.bills = response.bills;\n        dispatch({\n          type: ActionType.BILL_FETCH_SUCCESS,\n          payload: payload\n        });\n      }\n    } catch (err) {\n      console.log(\"Error received in API\", err);\n      let payload = {\n        errorMessage: err.message\n      };\n      dispatch({\n        type: ActionType.BILL_FETCH_FAIL,\n        payload: payload\n      });\n    }\n  };\n};\n/**\n * Function to delete Bill\n * @param {id of the bill which we need to delete} id \n */\n\nexport const deleteBill = id => {\n  return async dispatch => {\n    try {\n      let payload = {\n        bills: []\n      };\n      let billList = store.getState().dashboardReducer.billList;\n      payload.bills = billList.filter(bill => {\n        return bill.id !== id;\n      });\n      dispatch({\n        type: ActionType.DELETE_BILL_SUCCESS,\n        payload: payload\n      });\n    } catch (err) {}\n  };\n};\n/**\n * Function to add a new bill to the list\n */\n\nexport const addBill = () => {\n  return async dispatch => {\n    try {\n      let payload = {\n        bills: []\n      };\n      let billList = [...store.getState().dashboardReducer.billList];\n      let dummyBillObject = {\n        id: billList.length + 1,\n        description: \"Filpkart\",\n        category: \"shopping\",\n        amount: \"101\",\n        date: \"10-07-2020\"\n      };\n      billList.push(dummyBillObject);\n      payload.bills = billList;\n      dispatch({\n        type: ActionType.ADD_BILL_SUCCESS,\n        payload: payload\n      });\n    } catch (err) {}\n  };\n};\n/**\n * Function to calculate minimum bill which can be paid within a monthly budget\n */\n\nexport const calculatePayableBill = () => {\n  return async dispatch => {\n    try {\n      let payload = {\n        payableBill: []\n      };\n      let billList = [...store.getState().dashboardReducer.billList];\n      billList = billList.sort((a, b) => parseInt(b.amount) - parseInt(a.amount));\n      let totalSum = 0;\n      let ids = [];\n      billList.forEach(element => {\n        if (totalSum + parseInt(element.amount) <= MONTHLY_BUDGET) {\n          totalSum += parseInt(element.amount);\n          ids.push(element.id);\n        }\n      });\n      payload.payableBill = ids;\n      dispatch({\n        type: ActionType.PAYABLE_BILL_LIST_CREATED,\n        payload: payload\n      });\n    } catch (err) {}\n  };\n};","map":{"version":3,"sources":["/Users/apple/Desktop/Personal/bill-management-react/src/actions/DashboardAction.js"],"names":["DataService","ActionType","API_BASE_URL","BILL_SERVICES","store","MONTHLY_BUDGET","fetchBills","dispatch","endPoint","path","FETCH_BILL_API","payload","bills","response","callGetAPI","console","log","JSON","stringify","type","BILL_FETCH_SUCCESS","err","errorMessage","message","BILL_FETCH_FAIL","deleteBill","id","billList","getState","dashboardReducer","filter","bill","DELETE_BILL_SUCCESS","addBill","dummyBillObject","length","description","category","amount","date","push","ADD_BILL_SUCCESS","calculatePayableBill","payableBill","sort","a","b","parseInt","totalSum","ids","forEach","element","PAYABLE_BILL_LIST_CREATED"],"mappings":"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","sourcesContent":["import * as DataService from \"../networkLayer/ApiService\";\nimport * as ActionType from \"./types\";\nimport { API_BASE_URL, BILL_SERVICES } from \"../networkLayer/ApiEndpoints\";\nimport { store } from \"../App\";\nimport { MONTHLY_BUDGET } from \"../constants/Constant\";\n\n/**\n * Function to fetch Bill List from the server\n */\nexport const fetchBills = () => {\n  return async (dispatch) => {\n    try {\n      const endPoint = API_BASE_URL;\n      const path = BILL_SERVICES.FETCH_BILL_API;\n      let payload = {\n        bills: null,\n      };\n      const response = await DataService.callGetAPI(endPoint, path);\n      console.log(\"Response received\", JSON.stringify(response));\n      if (response) {\n        payload.bills = response.bills;\n        dispatch({\n          type: ActionType.BILL_FETCH_SUCCESS,\n          payload: payload,\n        });\n      }\n    } catch (err) {\n      console.log(\"Error received in API\", err);\n      let payload = {\n        errorMessage: err.message,\n      };\n      dispatch({\n        type: ActionType.BILL_FETCH_FAIL,\n        payload: payload,\n      });\n    }\n  };\n};\n\n/**\n * Function to delete Bill\n * @param {id of the bill which we need to delete} id \n */\nexport const deleteBill = (id) => {\n  return async (dispatch) => {\n    try {\n      let payload = {\n        bills: [],\n      };\n      let billList = store.getState().dashboardReducer.billList;\n\n      payload.bills = billList.filter((bill) => {\n        return bill.id !== id;\n      });\n\n      dispatch({\n        type: ActionType.DELETE_BILL_SUCCESS,\n        payload: payload,\n      });\n    } catch (err) {}\n  };\n};\n\n/**\n * Function to add a new bill to the list\n */\nexport const addBill = () => {\n  return async (dispatch) => {\n    try {\n      let payload = {\n        bills: [],\n      };\n      let billList = [...store.getState().dashboardReducer.billList];\n      let dummyBillObject = {\n        id: billList.length + 1,\n        description: \"Filpkart\",\n        category: \"shopping\",\n        amount: \"101\",\n        date: \"10-07-2020\",\n      };\n      billList.push(dummyBillObject);\n      payload.bills = billList;\n      dispatch({\n        type: ActionType.ADD_BILL_SUCCESS,\n        payload: payload,\n      });\n    } catch (err) {}\n  };\n};\n\n/**\n * Function to calculate minimum bill which can be paid within a monthly budget\n */\nexport const calculatePayableBill = () => {\n  return async (dispatch) => {\n    try {\n      let payload = {\n        payableBill: [],\n      };\n      let billList = [...store.getState().dashboardReducer.billList];\n\n      billList = billList.sort(\n        (a, b) => parseInt(b.amount) - parseInt(a.amount)\n      );\n\n      let totalSum = 0;\n      let ids = [];\n      billList.forEach((element) => {\n        if (totalSum + parseInt(element.amount) <= MONTHLY_BUDGET) {\n          totalSum += parseInt(element.amount);\n          ids.push(element.id);\n        }\n      });\n      payload.payableBill = ids;\n      dispatch({\n        type: ActionType.PAYABLE_BILL_LIST_CREATED,\n        payload: payload,\n      });\n    } catch (err) {}\n  };\n};\n"]},"metadata":{},"sourceType":"module"}